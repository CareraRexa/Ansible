# ===== playbooks/10-setup-monitoring.yml =====
- name: Setup Monitoring
  hosts: 192.168.2.50
  become: yes
  tasks:
    - name: Create monitoring namespace
      kubernetes.core.k8s:
        name: monitoring
        api_version: v1
        kind: Namespace
        state: present

    - name: Create Prometheus PVC
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: prometheus-pvc
            namespace: monitoring
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi

    - name: Create Grafana PVC
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: grafana-pvc
            namespace: monitoring
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi

    - name: Create Prometheus Config
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: prometheus-config
            namespace: monitoring
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                    - targets: ['localhost:9090']
                - job_name: 'kubernetes-pods'
                  kubernetes_sd_configs:
                  - role: pod
                  relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true

    - name: Deploy Prometheus
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: prometheus
            namespace: monitoring
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: prometheus
            template:
              metadata:
                labels:
                  app: prometheus
              spec:
                containers:
                - name: prometheus
                  image: prom/prometheus:latest
                  ports:
                  - containerPort: 9090
                  args:
                    - '--config.file=/etc/prometheus/prometheus.yml'
                    - '--storage.tsdb.path=/prometheus'
                    - '--storage.tsdb.retention.time=30d'
                  volumeMounts:
                  - name: config
                    mountPath: /etc/prometheus
                  - name: storage
                    mountPath: /prometheus
                volumes:
                - name: config
                  configMap:
                    name: prometheus-config
                - name: storage
                  persistentVolumeClaim:
                    claimName: prometheus-pvc

    - name: Create Prometheus Service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: prometheus-service
            namespace: monitoring
          spec:
            selector:
              app: prometheus
            ports:
            - port: 9090
              targetPort: 9090
            type: ClusterIP

    - name: Create Grafana Data Source ConfigMap
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-datasource-config
            namespace: monitoring
            labels:
              grafana_datasource: "1"
          data:
            datasources.yaml: |
              apiVersion: 1
              datasources:
                - name: Prometheus
                  type: prometheus
                  access: proxy
                  url: http://prometheus-service.monitoring.svc.cluster.local:9090
                  isDefault: true

    - name: Create Grafana SMTP Secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-smtp-secret
            namespace: monitoring
          stringData:
            SMTP_HOST: smtp.gmail.com
            SMTP_PORT: "587"
            SMTP_FROM: rectifier1995@gmail.com
            SMTP_USERNAME: rectifier1995@gmail.com
            SMTP_PASSWORD: kkjh iesj khgo xorx

    - name: Configure Grafana SMTP alerting
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-alerting-config
            namespace: monitoring
          data:
            grafana.ini: |
              [smtp]
              enabled = true
              host = smtp.gmail.com:587
              user = rectifier1995@gmail.com
              password = kkjh iesj khgo xorx
              from_address = rectifier1995@gmail.com
              skip_verify = true
              startTLS_policy = Always
              [alerting]
              enabled = true
              [unified_alerting]
              enabled = true

    - name: Provision Grafana Dashboards
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-dashboard-config
            namespace: monitoring
            labels:
              grafana_dashboard: "1"
          data:
            dashboards.yaml: |
              apiVersion: 1
              providers:
                - name: default
                  orgId: 1
                  folder: ""
                  type: file
                  disableDeletion: false
                  editable: true
                  options:
                    path: /etc/grafana/provisioning/dashboards

    - name: Create Node Dashboard JSON Config
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: node-dashboard
            namespace: monitoring
            labels:
              grafana_dashboard: "1"
          data:
            node-dashboard.json: |
              {
                "id": null,
                "title": "Node Monitoring",
                "timezone": "browser",
                "schemaVersion": 16,
                "version": 1,
                "refresh": "5s",
                "panels": [
                  {
                    "type": "graph",
                    "title": "CPU Usage %",
                    "targets": [
                      {
                        "expr": "100 - (avg by(instance) (irate(node_cpu_seconds_total{mode='idle'}[5m])) * 100)",
                        "legendFormat": "{{instance}}",
                        "refId": "A"
                      }
                    ],
                    "datasource": "Prometheus",
                    "gridPos": {"x": 0, "y": 0, "w": 12, "h": 8}
                  },
                  {
                    "type": "graph",
                    "title": "Memory Usage %",
                    "targets": [
                      {
                        "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                        "legendFormat": "{{instance}}",
                        "refId": "B"
                      }
                    ],
                    "datasource": "Prometheus",
                    "gridPos": {"x": 12, "y": 0, "w": 12, "h": 8}
                  },
                  {
                    "type": "graph",
                    "title": "Pod Restarts",
                    "targets": [
                      {
                        "expr": "rate(kube_pod_container_status_restarts_total[5m])",
                        "legendFormat": "{{pod}}",
                        "refId": "C"
                      }
                    ],
                    "datasource": "Prometheus",
                    "gridPos": {"x": 0, "y": 8, "w": 12, "h": 8}
                  },
                  {
                    "type": "graph",
                    "title": "HTTP 5xx Error Rate",
                    "targets": [
                      {
                        "expr": "sum(rate(http_requests_total{status=~\"5..\"}[1m]))",
                        "legendFormat": "5xx Errors",
                        "refId": "D"
                      }
                    ],
                    "datasource": "Prometheus",
                    "gridPos": {"x": 12, "y": 8, "w": 12, "h": 8}
                  }
                ]
              }

    - name: Deploy Grafana
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: grafana
            namespace: monitoring
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: grafana
            template:
              metadata:
                labels:
                  app: grafana
              spec:
                volumes:
                - name: storage
                  persistentVolumeClaim:
                    claimName: grafana-pvc
                - name: datasource-config
                  configMap:
                    name: grafana-datasource-config
                - name: grafana-config
                  configMap:
                    name: grafana-alerting-config
                - name: grafana-secrets
                  secret:
                    secretName: grafana-smtp-secret
                - name: dashboards-config
                  configMap:
                    name: grafana-dashboard-config
                - name: node-dashboard-json
                  configMap:
                    name: node-dashboard
                containers:
                - name: grafana
                  image: grafana/grafana:latest
                  ports:
                  - containerPort: 3000
                  env:
                  - name: GF_SECURITY_ADMIN_USER
                    value: "gwenchana"
                  - name: GF_SECURITY_ADMIN_PASSWORD
                    value: "fighting"
                  volumeMounts:
                  - name: storage
                    mountPath: /var/lib/grafana
                  - name: datasource-config
                    mountPath: /etc/grafana/provisioning/datasources
                  - name: grafana-config
                    mountPath: /etc/grafana/grafana.ini
                    subPath: grafana.ini
                  - name: grafana-secrets
                    mountPath: /etc/grafana/secrets
                    readOnly: true
                  - name: dashboards-config
                    mountPath: /etc/grafana/provisioning/dashboards
                  - name: node-dashboard-json
                    mountPath: /var/lib/grafana/dashboards

    - name: Create Grafana Service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana-service
            namespace: monitoring
          spec:
            selector:
              app: grafana
            ports:
            - port: 80
              targetPort: 3000
            type: LoadBalancer
            loadBalancerIP: "192.168.4.72"

    - name: Create Grafana Ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: grafana-ingress
            namespace: monitoring
            annotations:
              kubernetes.io/ingress.class: nginx
          spec:
            rules:
            - host: grafana.wap.local
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: grafana-service
                      port:
                        number: 80