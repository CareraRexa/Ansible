---
# ===== playbooks/10-setup-monitoring.yml =====
- name: Setup Monitoring
  hosts: 192.168.2.50
  become: yes
  tasks:
    - name: Create monitoring namespace
      kubernetes.core.k8s:
        name: monitoring
        api_version: v1
        kind: Namespace
        state: present

    - name: Create Prometheus PVC
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: prometheus-pvc
            namespace: monitoring
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi

    - name: Create Grafana PVC
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: grafana-pvc
            namespace: monitoring
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi

    # Deploy Prometheus
    - name: Deploy Prometheus
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: prometheus
            namespace: monitoring
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: prometheus
            template:
              metadata:
                labels:
                  app: prometheus
              spec:
                containers:
                - name: prometheus
                  image: prom/prometheus:latest
                  ports:
                  - containerPort: 9090
                  args:
                    - '--config.file=/etc/prometheus/prometheus.yml'
                    - '--storage.tsdb.path=/prometheus'
                    - '--storage.tsdb.retention.time=30d'
                  volumeMounts:
                  - name: config
                    mountPath: /etc/prometheus
                  - name: storage
                    mountPath: /prometheus
                volumes:
                - name: config
                  configMap:
                    name: prometheus-config
                - name: storage
                  persistentVolumeClaim:
                    claimName: prometheus-pvc

    # Prometheus Config
    - name: Create Prometheus Config
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: prometheus-config
            namespace: monitoring
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                    - targets: ['localhost:9090']
                - job_name: 'kubernetes-pods'
                  kubernetes_sd_configs:
                  - role: pod
                  relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true

    # Prometheus Service
    - name: Create Prometheus Service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: prometheus-service
            namespace: monitoring
          spec:
            selector:
              app: prometheus
            ports:
            - port: 9090
              targetPort: 9090
            type: ClusterIP

    # Deploy Grafana
    - name: Deploy Grafana
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: grafana
            namespace: monitoring
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: grafana
            template:
              metadata:
                labels:
                  app: grafana
              spec:
                containers:
                - name: grafana
                  image: grafana/grafana:latest
                  ports:
                  - containerPort: 3000
                  env:
                  - name: GF_SECURITY_ADMIN_USER
                    value: "gwenchana"
                  - name: GF_SECURITY_ADMIN_PASSWORD
                    value: "fighting"
                  volumeMounts:
                  - name: storage
                    mountPath: /var/lib/grafana
                volumes:
                - name: storage
                  persistentVolumeClaim:
                    claimName: grafana-pvc

    # Grafana LoadBalancer Service
    - name: Create Grafana Service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana-service
            namespace: monitoring
          spec:
            selector:
              app: grafana
            ports:
            - port: 80
              targetPort: 3000
            type: LoadBalancer
            loadBalancerIP: "192.168.4.72"

    # Grafana Ingress
    - name: Create Grafana Ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: grafana-ingress
            namespace: monitoring
            annotations:
              kubernetes.io/ingress.class: nginx
          spec:
            rules:
            - host: grafana.wap.local
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: grafana-service
                      port:
                        number: 80
    
    # Dashboard setup
    - name: Create Alert Notifier ConfigMap
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-smtp-secret
            namespace: monitoring
          stringData:
            SMTP_HOST: smtp.gmail.com
            SMTP_PORT: "587"
            SMTP_FROM: rectifier1995@gmail.com
            SMTP_USERNAME: rectifier1995@gmail.com
            SMTP_PASSWORD: kkjh iesj khgo xorx

    - name: Configure Grafana SMTP alerting
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-alerting-config
            namespace: monitoring
          data:
            grafana.ini: |
              [smtp]
              enabled = true
              host = smtp.gmail.com:587
              user = rectifier1995@gmail.com
              password = kkjh iesj khgo xorx
              from_address = rectifier1995@gmail.com
              skip_verify = true
              startTLS_policy = Always
              [alerting]
              enabled = true
              [unified_alerting]
              enabled = true

    - name: Mount SMTP config into Grafana
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: grafana
            namespace: monitoring
          spec:
            template:
              spec:
                volumes:
                  - name: grafana-config
                    configMap:
                      name: grafana-alerting-config
                  - name: grafana-secrets
                    secret:
                      secretName: grafana-smtp-secret
                containers:
                  - name: grafana
                    volumeMounts:
                      - name: grafana-config
                        mountPath: /etc/grafana/grafana.ini
                        subPath: grafana.ini
                      - name: grafana-secrets
                        mountPath: /etc/grafana/secrets
                        readOnly: true

    - name: Create Alert Rules for Kubernetes & Application Monitoring
      kubernetes.core.k8s:
        definition:
          apiVersion: monitoring.coreos.com/v1
          kind: PrometheusRule
          metadata:
            name: kube-app-alert-rules
            namespace: monitoring
          spec:
            groups:
            - name: cpu-usage-alerts
              rules:
              - alert: HighCPUUsage
                expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
                for: 2m
                labels:
                  severity: warning
                annotations:
                  summary: High CPU usage detected on {{ $labels.instance }}
                  description: Node CPU usage is above 80% for more than 2 minutes.

            - name: memory-usage-alerts
              rules:
              - alert: HighMemoryUsage
                expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 80
                for: 2m
                labels:
                  severity: warning
                annotations:
                  summary: High Memory usage on {{ $labels.instance }}
                  description: Memory usage is above 80%.

            - name: pod-crashloop-alerts
              rules:
              - alert: PodCrashLooping
                expr: rate(kube_pod_container_status_restarts_total[5m]) > 0.2
                for: 1m
                labels:
                  severity: critical
                annotations:
                  summary: Pod is crashlooping in {{ $labels.namespace }}
                  description: Container in pod {{ $labels.pod }} is restarting frequently.

            - name: app-error-rate-alerts
              rules:
              - alert: AppErrorRateHigh
                expr: sum(rate(http_requests_total{status=~"5.."}[1m])) > 5
                for: 1m
                labels:
                  severity: critical
                annotations:
                  summary: High HTTP 5xx error rate
                  description: Application is returning a high rate of errors.